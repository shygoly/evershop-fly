name: Deploy new EverShop instance

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: "New Fly.io app name (e.g. evershop-fly-branch1)"
        required: true
        type: string
      shop_name:
        description: "Display name of the shop"
        required: true
        type: string
      admin_email:
        description: "Admin email (stored as secret on the app)"
        required: true
        type: string
      admin_password:
        description: "Admin password (stored as secret on the app)"
        required: true
        type: string
      image:
        description: "Optional Docker image to deploy (e.g. docker.io/<user>/evershop-fly:latest). If set, build is skipped and this image is used."
        required: false
        type: string
      org_slug:
        description: "Fly organization slug to create the app under (overrides FLY_ORG_SLUG secret)."
        required: false
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      FLYCTL_ACCESS_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      FLY_ACCESS_TOKEN: ${{ secrets.FLY_ACCESS_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Authenticate flyctl
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.fly
          TOK="${FLY_API_TOKEN:-${FLYCTL_ACCESS_TOKEN:-${FLY_ACCESS_TOKEN:-}}}"
          if [ -z "$TOK" ]; then echo "::error::Missing Fly API token in secrets"; exit 1; fi
          printf '%s' "$TOK" > ~/.fly/access_token
          chmod 600 ~/.fly/access_token

      - name: Create app if not exists
        shell: bash
        run: |
          set -euo pipefail
          APP_IN="${{ inputs.app_name }}"
          APP="$APP_IN"
          ORG_SLUG_INPUT="${{ inputs.org_slug }}"
          ORG_SLUG_SECRET="${{ secrets.FLY_ORG_SLUG }}"
          ORG_SLUG="$ORG_SLUG_INPUT"
          if [ -z "$ORG_SLUG" ]; then ORG_SLUG="$ORG_SLUG_SECRET"; fi
          if [ -z "$ORG_SLUG" ]; then
            echo "No org_slug input/secret; discovering first available org via flyctl orgs list"
            ORG_SLUG=$(flyctl orgs list --json | node -e '
              let d="";process.stdin.on("data",c=>d+=c);
              process.stdin.on("end",()=>{try{let j=JSON.parse(d);if(Array.isArray(j)&&j.length)console.log(j[0].slug);else console.log("")}catch(e){console.log("")}});
            ')
          fi
          if [ -z "$ORG_SLUG" ]; then
            echo "::error::Could not determine Fly org slug. Set inputs.org_slug or secrets.FLY_ORG_SLUG"
            exit 1
          fi
          echo "Using Fly org: $ORG_SLUG"

          # Try create; if name taken globally, auto-suffix and retry
          set +e
          CREATE_OUT=$(flyctl apps create "$APP" -o "$ORG_SLUG" 2>&1)
          CREATE_CODE=$?
          set -e
          if [ $CREATE_CODE -ne 0 ]; then
            echo "$CREATE_OUT"
            if echo "$CREATE_OUT" | grep -qi "Name has already been taken"; then
              SUF=$(openssl rand -hex 3 | head -c 6)
              APP="${APP_IN}-${SUF}"
              echo "App name taken. Retrying with: $APP"
              flyctl apps create "$APP" -o "$ORG_SLUG"
            else
              echo "::error::Failed to create app"
              exit 1
            fi
          fi
          echo "APP_NAME=$APP" >> "$GITHUB_ENV"
          echo "App to use: $APP"

      - name: Configure secrets (DB/R2 shared, shop/admin customized)
        shell: bash
        run: |
          set -euo pipefail
          APP="$APP_NAME"
          if [ -z "$APP" ]; then APP='${{ inputs.app_name }}'; fi
          NODE_CONFIG_JSON=$(printf '%s' '{"shop":{"name":"'"${{ inputs.shop_name }}"'"}}')
          # optional shared secrets
          [ -n "${{ secrets.DATABASE_URL }}" ] && flyctl secrets set DATABASE_URL='${{ secrets.DATABASE_URL }}' -a "$APP"
          [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ] && flyctl secrets set AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' -a "$APP"
          [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] && flyctl secrets set AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' -a "$APP"
          [ -n "${{ secrets.AWS_REGION }}" ] && flyctl secrets set AWS_REGION='${{ secrets.AWS_REGION }}' -a "$APP"
          [ -n "${{ secrets.AWS_BUCKET_NAME }}" ] && flyctl secrets set AWS_BUCKET_NAME='${{ secrets.AWS_BUCKET_NAME }}' -a "$APP"
          [ -n "${{ secrets.AWS_ENDPOINT_URL_S3 }}" ] && flyctl secrets set AWS_ENDPOINT_URL_S3='${{ secrets.AWS_ENDPOINT_URL_S3 }}' -a "$APP"
          [ -n "${{ secrets.PUBLIC_ASSET_BASE_URL }}" ] && flyctl secrets set PUBLIC_ASSET_BASE_URL='${{ secrets.PUBLIC_ASSET_BASE_URL }}' -a "$APP"
          # Optional discrete Postgres connection details (EverShop uses them in production.json)
          [ -n "${{ secrets.DB_HOST }}" ] && flyctl secrets set DB_HOST='${{ secrets.DB_HOST }}' -a "$APP"
          [ -n "${{ secrets.DB_PORT }}" ] && flyctl secrets set DB_PORT='${{ secrets.DB_PORT }}' -a "$APP"
          [ -n "${{ secrets.DB_NAME }}" ] && flyctl secrets set DB_NAME='${{ secrets.DB_NAME }}' -a "$APP"
          [ -n "${{ secrets.DB_USER }}" ] && flyctl secrets set DB_USER='${{ secrets.DB_USER }}' -a "$APP"
          [ -n "${{ secrets.DB_PASSWORD }}" ] && flyctl secrets set DB_PASSWORD='${{ secrets.DB_PASSWORD }}' -a "$APP"
          flyctl secrets set NODE_CONFIG="$NODE_CONFIG_JSON" -a "$APP"
          # admin secrets always
          flyctl secrets set ADMIN_EMAIL='${{ inputs.admin_email }}' -a "$APP"
          flyctl secrets set ADMIN_PASSWORD='${{ inputs.admin_password }}' -a "$APP"

      - name: Deploy to Fly.io (prebuilt image if provided)
        shell: bash
        run: |
          set -euo pipefail
          APP="$APP_NAME"
          if [ -z "$APP" ]; then APP='${{ inputs.app_name }}'; fi
          IMG="${{ inputs.image }}"
          if [ -n "$IMG" ]; then
            echo "Using prebuilt image: $IMG"
            flyctl deploy -a "$APP" -i "$IMG"
          else
            echo "No image provided, building with remote builder"
            flyctl deploy -a "$APP" --remote-only
          fi

      - name: Dump Fly logs on failure
        if: ${{ failure() }}
        shell: bash
        run: |
          set -euo pipefail
          APP="$APP_NAME"; if [ -z "$APP" ]; then APP='${{ inputs.app_name }}'; fi
          echo "--- Machines list ($APP) ---"
          flyctl machines list -a "$APP" || true
          MID=$(flyctl machines list -a "$APP" --json | node -e '
            let d="";process.stdin.on("data",c=>d+=c);process.stdin.on("end",()=>{try{let j=JSON.parse(d);if(Array.isArray(j)&&j.length)console.log(j[0].id);else console.log("")}catch(e){console.log("")}});
          ' || true)
          echo "--- Recent app logs ($APP) (buffered) ---"
          flyctl logs -a "$APP" --no-tail || true
          if [ -n "$MID" ]; then
            echo "--- Machine $MID logs ($APP) (buffered) ---"
            flyctl logs -a "$APP" --machine "$MID" --no-tail || true
          fi

      - name: Create admin user
        shell: bash
        run: |
          set -euo pipefail
          APP="$APP_NAME"; if [ -z "$APP" ]; then APP='${{ inputs.app_name }}'; fi
          # Try official CLI if present, fallback to node cli.js path
          ADMIN_NAME="${{ inputs.shop_name }} Owner"
          flyctl ssh console -a "$APP" -C "sh -lc 'set -e; if command -v evershop >/dev/null 2>&1; then evershop user:create --name \"'$ADMIN_NAME'\" --email \"${{ inputs.admin_email }}\" --password \"${{ inputs.admin_password }}\" --role admin; else node /app/node_modules/@evershop/evershop/bin/evershop user:create --name \"'$ADMIN_NAME'\" --email \"${{ inputs.admin_email }}\" --password \"${{ inputs.admin_password }}\" --role admin; fi'"

      - name: Output
        run: |
          APP="$APP_NAME"; if [ -z "$APP" ]; then APP='${{ inputs.app_name }}'; fi
          echo "App: $APP deployed."
          echo "Visit: https://$APP.fly.dev"
